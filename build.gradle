import dex.plugins.outlet.v2.util.ReleaseType

plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'io.github.dexman545.outlet' version '1.6.1'
	id 'com.modrinth.minotaur' version '2.+'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.mod_id
version = "${project.mod_version}+${project.minecraft_version}"

outlet {
	maintainPropertiesFile = System.getenv("DISABLE_PROPERTIES_UPDATE") == null
	mcVersionRange = project.supported_minecraft_versions
	allowedReleaseTypes = Set.of(ReleaseType.RELEASE)
	propertiesData = [
	        'yarn_version': outlet.yarnVersion(project.minecraft_version),
			'loader_version': outlet.loaderVersion()
	]
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
    splitEnvironmentSourceSets()

    mods {
        modid {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_version}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
}

processResources {
	inputs.properties(Map.of(
			"modId",          project.mod_id,
			"modVersion",     project.version,
			"modName",        project.mod_name,
			"modDescription", project.mod_description,
			"modLicense",     project.mod_license,
			"mavenGroup",     project.group,
			"modMainClass",   project.mod_main_class
	))


	filesMatching("fabric.mod.json") {
		expand(Map.of(
				"modId",          project.mod_id,
				"modVersion",     project.version,
				"modName",        project.mod_name,
				"modDescription", project.mod_description,
				"modLicense",     project.mod_license,
				"mavenGroup",     project.group,
				"modMainClass",   project.mod_main_class
		))
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "explosive-breeding"
	def customVersionName = System.getenv("VERSION_NAME")
	if (customVersionName != null) versionName = customVersionName
	versionNumber = "${project.version}"
	versionType = "beta"
	uploadFile = remapJar.archiveFile
	//additionalFiles = [sourcesJar.archiveFile, javadocJar.archiveFile]
	additionalFiles = [sourcesJar.archiveFile]
	gameVersions = outlet.mcVersions()
	syncBodyFrom = rootProject.file("README.md").text
	def changelogFile = rootProject.file("CHANGELOG.md")
	if (changelogFile.exists()) {
		changelog = changelogFile.text
	}

	dependencies {
		// TODO: if monkeylib is required: required.project "monkeylib538"
	}
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
